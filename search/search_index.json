{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"linkml-owl This is an ALPHA version of a tool for translating LinkML instance data to OWL (TBoxes and ABoxes) LinkML is a general purpose data modeling language for authoring schemas to structure data. The perspective of linkml-owl is that elements of an OWL ontology (in particular, classes) are data elements that should conform to a schema EXAMPLES.md SPECIFICATION.md Usage linkml-data2owl -s my_schema.yaml my_data.{yaml,json,tsv,rdf} -o my_ontology.owl.ttl Input file can be yaml, json, csv, or any rdf serialization. Basics First specify your schema classes: Class: slots: - id - label class_uri: owl:Class AnatomicalEntityClass: is_a: Class slots: - part_of slot_usage: range: AnatomicalEntityClass slots: label: slot_uri: rdfs:label annotations: owl: AnnotationAssertion part_of: slot_uri: BFO:0000050 annotations: owl: SubClassOf, ObjectSomeValuesFrom Then provide OWL classes as LinkML data instances using any of the standard ways of providing data in LinkML (see working with data ) For example, as TSV or YAML: - id: UBERON:1 label: eye part_of: ['UBERON:2'] - id: UBERON:2 label: head part_of: ['UBERON:3'] - id: UBERON:3 label: organism then run this through the command line tool to generate an ontology linkml-data2owl -C AnatomicalEntityClass -s my_schema.yaml my_data.yaml -o my_ont.ofn (note: the -C option is mandatory unless the data has a @type designator) AnnotationAssertion(rdfs:label UBERON:1 \"eye\") AnnotationAssertion(rdfs:label UBERON:2 \"head\") AnnotationAssertion(rdfs:label UBERON:3 \"organism\") SubClassOf( UBERON:1 ObjectSomeValuesFrom( BFO:0000050 UBERON:2)) SubClassOf( UBERON:2 ObjectSomeValuesFrom( BFO:0000050 UBERON:3)) See EXAMPLES.md for a complete set of examples/conformance suite Templates and Fstrings The above method of annotating slots with OWL interpretations works well for cases where there is a relatively straightforward mapping between slots and axioms. For full grained control you can use either fstrings, e.g. SubClassOf({id} {sublass_of}) , for cases with no or minimal logic Jinja2 templates, for cases where control logic or advanced mappings are required Here is an example of a more advanced schema involving nesting where we might want to model parts with counts - examples include reaction participants with stoichiometry, or protein complexes where members may be present with different counts or activation states: PartWithCounts: is_a: Anonymous attributes: unit: range: NamedThing multivalued: false annotations: owl: SomeValuesFrom count: range: integer minimum_value: 1 annotations: owl: HasValue state: range: ActivationStateEnum annotations: owl: SomeValuesFrom CollectionOfPartsWithCounts: is_a: NamedThing slots: - has_part slot_usage: has_part: range: PartWithCounts inlined: true annotations: owl.template: |- {% for p in has_part %} SubClassOf( {{id}} ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( {{p.unit }} ObjectSomeValuesFrom(RO:0000053 {{p.state.meaning}}) {% if p.count %} DataHasValue(PATO:0001555 {{p.count}}) {% endif %} ) ) ) {% endfor %} Given an input file: id: x:collection has_part: - unit: x:p1 count: 2 state: ACTIVATED - unit: x:p2 count: 3 state: ACTIVATED (note that we use using nesting / a normalized representation here, this is harder to represent in a spreadsheet). This will generate the following OWL: SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p1 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"2\"^^xsd:integer )))) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p2 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"3\"^^xsd:integer )))) Vocabulary Use the following keywords to annotate your schema elements: Slots Axiom type designators SubClassOf EquivalentClasses AnnotationAssertion ... Expression modifier designators ObjectSomeValuesFrom ObjectAllValuesFrom ... Collection type designators ObjectIntersectionOf ObjectUnionOf ... Classes Class Individual ... Relationship to OWL template languages Although LinkML is robust and stable, LinkML-OWL is alpha software and incomplete. For now, to convert from TSV to OWL you should for now use a dedicated environment: dosdp-tools robot-templates ottr For most purposes, these frameworks are also simpler and less overhead, they treat ontology generation as a string templating problem, and the emphasis is on the generation of axioms from templates over formal descriptions of the source input file. In contrast, linkml-owl leverages the linkml framework for rich modeling of the source data structures used to generate the ontology, in particular: Clear computable description of which columns are required, which columns are multivalued etc Ability to use arbitrarily nested JSON trees or RDF graphs as input Use of semantic enumerations for example, a field value may be restricted to two ontology terms such as \"off\" or \"on\" Translation of source schema to other formalisms such as JSON-Schema, JSON-LD Contexts, shape languages, SQL, ... Flexible validation of source input files leveraging any combination of JSON-Schema, SHACL, or ShEx Generation of markdown documentation from source schemas An example of a domain where this kind of rich data modeling of input data includes generation of chemical entity ontologies from data. See the chemrof project. The overall philosophy of linkml-owl is composability of distinct parts. It is a relatively lightweight library that is only concerned with mapping or templating from a source dataset to OWL. It delegates other aspects to other libraries, in particular the following are seen as separate concerns: Validation of input Organizing templates hierarchically Template reuse, including reusing the same slots, and an import mechanism Generation of documentation Automatic filling in of default values Lexical manipulation, including pre-populating labels, synomyms, and text definitions See Also OWL Generator in the LinkML core generates OWL from Schemas, not data rdflib_dumper in linkml-runtime generates RDF graphs (ABoxes) from LinkML instances graphs using a standard 1:1 mapping","title":"Introduction"},{"location":"#linkml-owl","text":"This is an ALPHA version of a tool for translating LinkML instance data to OWL (TBoxes and ABoxes) LinkML is a general purpose data modeling language for authoring schemas to structure data. The perspective of linkml-owl is that elements of an OWL ontology (in particular, classes) are data elements that should conform to a schema EXAMPLES.md SPECIFICATION.md","title":"linkml-owl"},{"location":"#usage","text":"linkml-data2owl -s my_schema.yaml my_data.{yaml,json,tsv,rdf} -o my_ontology.owl.ttl Input file can be yaml, json, csv, or any rdf serialization.","title":"Usage"},{"location":"#basics","text":"First specify your schema classes: Class: slots: - id - label class_uri: owl:Class AnatomicalEntityClass: is_a: Class slots: - part_of slot_usage: range: AnatomicalEntityClass slots: label: slot_uri: rdfs:label annotations: owl: AnnotationAssertion part_of: slot_uri: BFO:0000050 annotations: owl: SubClassOf, ObjectSomeValuesFrom Then provide OWL classes as LinkML data instances using any of the standard ways of providing data in LinkML (see working with data ) For example, as TSV or YAML: - id: UBERON:1 label: eye part_of: ['UBERON:2'] - id: UBERON:2 label: head part_of: ['UBERON:3'] - id: UBERON:3 label: organism then run this through the command line tool to generate an ontology linkml-data2owl -C AnatomicalEntityClass -s my_schema.yaml my_data.yaml -o my_ont.ofn (note: the -C option is mandatory unless the data has a @type designator) AnnotationAssertion(rdfs:label UBERON:1 \"eye\") AnnotationAssertion(rdfs:label UBERON:2 \"head\") AnnotationAssertion(rdfs:label UBERON:3 \"organism\") SubClassOf( UBERON:1 ObjectSomeValuesFrom( BFO:0000050 UBERON:2)) SubClassOf( UBERON:2 ObjectSomeValuesFrom( BFO:0000050 UBERON:3)) See EXAMPLES.md for a complete set of examples/conformance suite","title":"Basics"},{"location":"#templates-and-fstrings","text":"The above method of annotating slots with OWL interpretations works well for cases where there is a relatively straightforward mapping between slots and axioms. For full grained control you can use either fstrings, e.g. SubClassOf({id} {sublass_of}) , for cases with no or minimal logic Jinja2 templates, for cases where control logic or advanced mappings are required Here is an example of a more advanced schema involving nesting where we might want to model parts with counts - examples include reaction participants with stoichiometry, or protein complexes where members may be present with different counts or activation states: PartWithCounts: is_a: Anonymous attributes: unit: range: NamedThing multivalued: false annotations: owl: SomeValuesFrom count: range: integer minimum_value: 1 annotations: owl: HasValue state: range: ActivationStateEnum annotations: owl: SomeValuesFrom CollectionOfPartsWithCounts: is_a: NamedThing slots: - has_part slot_usage: has_part: range: PartWithCounts inlined: true annotations: owl.template: |- {% for p in has_part %} SubClassOf( {{id}} ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( {{p.unit }} ObjectSomeValuesFrom(RO:0000053 {{p.state.meaning}}) {% if p.count %} DataHasValue(PATO:0001555 {{p.count}}) {% endif %} ) ) ) {% endfor %} Given an input file: id: x:collection has_part: - unit: x:p1 count: 2 state: ACTIVATED - unit: x:p2 count: 3 state: ACTIVATED (note that we use using nesting / a normalized representation here, this is harder to represent in a spreadsheet). This will generate the following OWL: SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p1 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"2\"^^xsd:integer )))) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p2 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"3\"^^xsd:integer ))))","title":"Templates and Fstrings"},{"location":"#vocabulary","text":"Use the following keywords to annotate your schema elements: Slots Axiom type designators SubClassOf EquivalentClasses AnnotationAssertion ... Expression modifier designators ObjectSomeValuesFrom ObjectAllValuesFrom ... Collection type designators ObjectIntersectionOf ObjectUnionOf ... Classes Class Individual ...","title":"Vocabulary"},{"location":"#relationship-to-owl-template-languages","text":"Although LinkML is robust and stable, LinkML-OWL is alpha software and incomplete. For now, to convert from TSV to OWL you should for now use a dedicated environment: dosdp-tools robot-templates ottr For most purposes, these frameworks are also simpler and less overhead, they treat ontology generation as a string templating problem, and the emphasis is on the generation of axioms from templates over formal descriptions of the source input file. In contrast, linkml-owl leverages the linkml framework for rich modeling of the source data structures used to generate the ontology, in particular: Clear computable description of which columns are required, which columns are multivalued etc Ability to use arbitrarily nested JSON trees or RDF graphs as input Use of semantic enumerations for example, a field value may be restricted to two ontology terms such as \"off\" or \"on\" Translation of source schema to other formalisms such as JSON-Schema, JSON-LD Contexts, shape languages, SQL, ... Flexible validation of source input files leveraging any combination of JSON-Schema, SHACL, or ShEx Generation of markdown documentation from source schemas An example of a domain where this kind of rich data modeling of input data includes generation of chemical entity ontologies from data. See the chemrof project. The overall philosophy of linkml-owl is composability of distinct parts. It is a relatively lightweight library that is only concerned with mapping or templating from a source dataset to OWL. It delegates other aspects to other libraries, in particular the following are seen as separate concerns: Validation of input Organizing templates hierarchically Template reuse, including reusing the same slots, and an import mechanism Generation of documentation Automatic filling in of default values Lexical manipulation, including pre-populating labels, synomyms, and text definitions","title":"Relationship to OWL template languages"},{"location":"#see-also","text":"OWL Generator in the LinkML core generates OWL from Schemas, not data rdflib_dumper in linkml-runtime generates RDF graphs (ABoxes) from LinkML instances graphs using a standard 1:1 mapping","title":"See Also"},{"location":"examples/","text":"linkml-owl Test Cases These examples are generated automatically from test_owl_dumper For the complete schema, see tests/input/owl_dumper_test.yaml Annotation using literals Description : Default is to use an annotation assertion, and if the range is a string then this is literal Schema : id: http//example.org/Annotation-using-literals classes: NamedThing: is_a: Thing attributes: id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a label: foo Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( rdfs:label <http://example.org/a> \"foo\" ) ) Annotation using IRIs Description : As above, but if the range is an instance of a LinkML class then use a literal Schema : id: http//example.org/Annotation-using-IRIs classes: ExactMatch: is_a: NamedThing attributes: exactMatch: annotations: owl: AnnotationAssertion slot_uri: skos:exactMatch range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a exactMatch: x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( <http://www.w3.org/2004/02/skos/core#exactMatch> <http://example.org/a> <http://example.org/b> ) ) Annotation using forced literals Description : We can force a literal by imposing a range Schema : id: http//example.org/Annotation-using-forced-literals classes: ExactMatchAsLiteral: is_a: NamedThing attributes: exactMatch: annotations: owl: AnnotationAssertion slot_uri: skos:exactMatch range: string required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a exactMatch: x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( <http://www.w3.org/2004/02/skos/core#exactMatch> <http://example.org/a> \"x:b\" ) ) Basic SubClassOf between named classes Description : _Adding SubClassOf annotation to the linkml class forces a SubClass axiom _ Schema : id: http//example.org/Basic-SubClassOf-between-named-classes classes: Child: is_a: NamedThing attributes: subclass_of: annotations: owl: SubClassOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> <http://example.org/b> ) ) basic direct equivalence between named classes Description : Adding EquivalentTo annotation to the linkml class forces a SubClass axiom Schema : id: http//example.org/basic-direct-equivalence-between-named-classes classes: DirectEquivalent: is_a: NamedThing attributes: equivalent_to: annotations: owl: EquivalentClasses slot_uri: owl:equivalentClasses multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a equivalent_to: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> <http://example.org/b> ) ) SubClassOf SomeValuesFrom Description : A SubClassOf annotation makes the annotation type be subclass, a SomeValuesFrom annotation makes the slot interpreted as an existential Schema : id: http//example.org/SubClassOf-SomeValuesFrom classes: Part: is_a: NamedThing attributes: part_of: annotations: owl: ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) ) SubClassOf AllValuesFrom Description : As above, but with universal restrictions Schema : id: http//example.org/SubClassOf-AllValuesFrom classes: PartOnly: is_a: NamedThing attributes: part_of: annotations: owl: ObjectAllValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectAllValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) ) SubClassOf SomeValuesFrom plus label Description : Demonstrates a mix of slots, some annotation, some logical Schema : id: http//example.org/SubClassOf-SomeValuesFrom-plus-label classes: Part: is_a: NamedThing attributes: part_of: annotations: owl: ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a label: foo part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( rdfs:label <http://example.org/a> \"foo\" ) SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) ) SubClassOf Union Description : The slot is interpreted as a parent class, and all slot values with a UnionOf annotation are collected to make a UnionOf expression Schema : id: http//example.org/SubClassOf-Union classes: ChildOfUnion: is_a: NamedThing attributes: subclass_of: annotations: owl: SubClassOf, UnionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectUnionOf( <http://example.org/b> <http://example.org/c> ) ) ) EquivalentTo Union Description : As above, but with equivalence Schema : id: http//example.org/EquivalentTo-Union classes: EquivUnion: is_a: NamedThing attributes: operands: annotations: owl: EquivalentClasses, UnionOf multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a operands: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectUnionOf( <http://example.org/b> <http://example.org/c> ) ) ) EquivalentTo IntersectionOf Description : The slot is interpreted as a parent class, and all slot values with a IntersectionOf annotation are collected to make a IntersectionOf expression Schema : id: http//example.org/EquivalentTo-IntersectionOf classes: EquivIntersection: is_a: NamedThing attributes: operands: annotations: owl: EquivalentClasses, IntersectionOf multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a operands: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/b> <http://example.org/c> ) ) ) EquivalentTo Genus and SomeValuesFrom Description : All slot value interpretations are collected into a single IntersectionOf Schema : id: http//example.org/EquivalentTo-Genus-and-SomeValuesFrom classes: EquivGenusAndPartOf: is_a: NamedThing attributes: subclass_of: annotations: owl: EquivalentClasses, IntersectionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true part_of: annotations: owl: EquivalentClasses, IntersectionOf, ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true other_part_ofs: annotations: owl: ObjectSomeValuesFrom description: for hidden GCIs slot_uri: BFO:0000050 multivalued: true range: NamedThing required: false id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - X:genus part_of: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/genus> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/c> ) ) ) ) Hidden GCI Description : Demonstrates a case where some slots contribute to a logical definition (equiv axiom), and other contribute to additional axioms (so called hidden GCIs) Schema : id: http//example.org/Hidden-GCI classes: EquivGenusAndPartOf: is_a: NamedThing attributes: subclass_of: annotations: owl: EquivalentClasses, IntersectionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true part_of: annotations: owl: EquivalentClasses, IntersectionOf, ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true other_part_ofs: annotations: owl: ObjectSomeValuesFrom description: for hidden GCIs slot_uri: BFO:0000050 multivalued: true range: NamedThing required: false id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - X:genus part_of: - x:b other_part_ofs: - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/c> ) ) EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/genus> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) ) ) slot-value level fstring template Description : Axiom generation per slot-value assignment. (Note that currently non-identifier fields have their URIs expanded, but the OWL is the same) Schema : id: http//example.org/slot-value-level-fstring-template classes: ClassTemplateExample1: is_a: NamedThing attributes: subclass_of: annotations: owl.fstring: tag: owl.fstring value: SubClassOf({id} {V}) slot_uri: rdfs:subclass_of multivalued: true range: NamedThing part_of: slot_uri: BFO:0000050 multivalued: true range: NamedThing other_part_ofs: slot_uri: BFO:0000050 multivalued: true range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:a <http://example.org/b> ) ) slot-value level jinja template Description : Axiom generation per slot-value assignment. (Note that currently non-identifier fields have their URIs expanded, but the OWL is the same) Schema : id: http//example.org/slot-value-level-jinja-template classes: ClassTemplateExample2: is_a: NamedThing attributes: subclass_of: annotations: owl.template: tag: owl.template value: '{% for p in subclass_of %}SubClassOf({{id}} {{p}}){% endfor %}' slot_uri: rdfs:subclass_of multivalued: true range: NamedThing part_of: slot_uri: BFO:0000050 multivalued: true range: NamedThing other_part_ofs: slot_uri: BFO:0000050 multivalued: true range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:a x:b ) ) Parts collection with counts Description : _Demonstrates nesting _ Schema : id: http//example.org/Parts-collection-with-counts classes: CollectionOfPartsWithCounts: annotations: owl.template: tag: owl.template value: \"{% for p in has_part %}\\nSubClassOf( {{id}}\\n ObjectSomeValuesFrom(\\ \\ BFO:0000051\\n ObjectIntersectionOf( {{p.unit\\ \\ }}\\n ObjectSomeValuesFrom(RO:0000053\\ \\ {{p.state.meaning}})\\n \\ \\ {% if p.count %}\\n \\ \\ DataHasValue(PATO:0001555 \\\"{{p.count}}\\\"^^xsd:integer )\\n\\ \\ {% endif %}\\n \\ \\ )\\n\\n \\ \\ )\\n )\\n{% endfor %}\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inlined: true inverse: part_of range: PartWithCounts id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - unit: x:p1 count: 2 state: ACTIVATED - unit: x:p2 count: 3 state: ACTIVATED Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p1 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"2\"^^xsd:integer ) ) ) ) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p2 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"3\"^^xsd:integer ) ) ) ) ) Parts collection Description : _Things that are made of an arbitrary list of parts _ Schema : id: http//example.org/Parts-collection classes: CollectionOfParts: annotations: owl.template: tag: owl.template value: \"{% for p in has_part %}\\nSubClassOf( {{id}} ObjectSomeValuesFrom(\\ \\ BFO:0000051 {{p}} ) )\\n{% endfor %}\\nDisjointClasses(\\n Annotation(\\ \\ rdfs:label \\\"all parts of {{id}} are part-disjoint\\\")\\n {% for p in has_part\\ \\ %}\\n ObjectSomeValuesFrom( BFO:0000050 {{p}} )\\n {% endfor %}\\n)\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inverse: part_of range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - x:p1 - x:p2 Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 x:p1 ) ) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 x:p2 ) ) DisjointClasses( Annotation( rdfs:label \"all parts of x:collection are part-disjoint\" ) ObjectSomeValuesFrom( BFO:0000050 x:p1 ) ObjectSomeValuesFrom( BFO:0000050 x:p2 ) ) ) Defined parts collection Description : _Things that are defined exhaustively by an arbitrary list of parts _ Schema : id: http//example.org/Defined-parts-collection classes: DefinedCollectionOfParts: annotations: owl.template: tag: owl.template value: \"EquivalentClasses( {{id}}\\n ObjectIntersectionOf(\\n\\ \\ {% for p in has_part %}\\n ObjectSomeValuesFrom(\\ \\ BFO:0000051 {{p}} )\\n {% endfor %}\\n \\ \\ ObjectAllValuesFrom( BFO:0000051\\n \\ \\ ObjectSomeValuesFrom( BFO:0000050\\n \\ \\ ObjectUnionOf(\\n \\ \\ {% for p in has_part %}\\n \\ \\ ObjectSomeValuesFrom( BFO:0000051 {{p}} )\\n \\ \\ {% endfor %} )\\n \\ \\ )\\n )\\n \\ \\ )\\n )\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inverse: part_of range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - x:dp1 - x:dp2 Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( x:collection ObjectIntersectionOf( ObjectSomeValuesFrom( BFO:0000051 x:dp1 ) ObjectSomeValuesFrom( BFO:0000051 x:dp2 ) ObjectAllValuesFrom( BFO:0000051 ObjectSomeValuesFrom( BFO:0000050 ObjectUnionOf( ObjectSomeValuesFrom( BFO:0000051 x:dp1 ) ObjectSomeValuesFrom( BFO:0000051 x:dp2 ) ) ) ) ) ) )","title":"Examples"},{"location":"examples/#linkml-owl-test-cases","text":"These examples are generated automatically from test_owl_dumper For the complete schema, see tests/input/owl_dumper_test.yaml","title":"linkml-owl Test Cases"},{"location":"examples/#annotation-using-literals","text":"Description : Default is to use an annotation assertion, and if the range is a string then this is literal Schema : id: http//example.org/Annotation-using-literals classes: NamedThing: is_a: Thing attributes: id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a label: foo Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( rdfs:label <http://example.org/a> \"foo\" ) )","title":"Annotation using literals"},{"location":"examples/#annotation-using-iris","text":"Description : As above, but if the range is an instance of a LinkML class then use a literal Schema : id: http//example.org/Annotation-using-IRIs classes: ExactMatch: is_a: NamedThing attributes: exactMatch: annotations: owl: AnnotationAssertion slot_uri: skos:exactMatch range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a exactMatch: x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( <http://www.w3.org/2004/02/skos/core#exactMatch> <http://example.org/a> <http://example.org/b> ) )","title":"Annotation using IRIs"},{"location":"examples/#annotation-using-forced-literals","text":"Description : We can force a literal by imposing a range Schema : id: http//example.org/Annotation-using-forced-literals classes: ExactMatchAsLiteral: is_a: NamedThing attributes: exactMatch: annotations: owl: AnnotationAssertion slot_uri: skos:exactMatch range: string required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a exactMatch: x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( <http://www.w3.org/2004/02/skos/core#exactMatch> <http://example.org/a> \"x:b\" ) )","title":"Annotation using forced literals"},{"location":"examples/#basic-subclassof-between-named-classes","text":"Description : _Adding SubClassOf annotation to the linkml class forces a SubClass axiom _ Schema : id: http//example.org/Basic-SubClassOf-between-named-classes classes: Child: is_a: NamedThing attributes: subclass_of: annotations: owl: SubClassOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> <http://example.org/b> ) )","title":"Basic SubClassOf between named classes"},{"location":"examples/#basic-direct-equivalence-between-named-classes","text":"Description : Adding EquivalentTo annotation to the linkml class forces a SubClass axiom Schema : id: http//example.org/basic-direct-equivalence-between-named-classes classes: DirectEquivalent: is_a: NamedThing attributes: equivalent_to: annotations: owl: EquivalentClasses slot_uri: owl:equivalentClasses multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a equivalent_to: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> <http://example.org/b> ) )","title":"basic direct equivalence between named classes"},{"location":"examples/#subclassof-somevaluesfrom","text":"Description : A SubClassOf annotation makes the annotation type be subclass, a SomeValuesFrom annotation makes the slot interpreted as an existential Schema : id: http//example.org/SubClassOf-SomeValuesFrom classes: Part: is_a: NamedThing attributes: part_of: annotations: owl: ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) )","title":"SubClassOf SomeValuesFrom"},{"location":"examples/#subclassof-allvaluesfrom","text":"Description : As above, but with universal restrictions Schema : id: http//example.org/SubClassOf-AllValuesFrom classes: PartOnly: is_a: NamedThing attributes: part_of: annotations: owl: ObjectAllValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectAllValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) )","title":"SubClassOf AllValuesFrom"},{"location":"examples/#subclassof-somevaluesfrom-plus-label","text":"Description : Demonstrates a mix of slots, some annotation, some logical Schema : id: http//example.org/SubClassOf-SomeValuesFrom-plus-label classes: Part: is_a: NamedThing attributes: part_of: annotations: owl: ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a label: foo part_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> AnnotationAssertion( rdfs:label <http://example.org/a> \"foo\" ) SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) )","title":"SubClassOf SomeValuesFrom plus label"},{"location":"examples/#subclassof-union","text":"Description : The slot is interpreted as a parent class, and all slot values with a UnionOf annotation are collected to make a UnionOf expression Schema : id: http//example.org/SubClassOf-Union classes: ChildOfUnion: is_a: NamedThing attributes: subclass_of: annotations: owl: SubClassOf, UnionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectUnionOf( <http://example.org/b> <http://example.org/c> ) ) )","title":"SubClassOf Union"},{"location":"examples/#equivalentto-union","text":"Description : As above, but with equivalence Schema : id: http//example.org/EquivalentTo-Union classes: EquivUnion: is_a: NamedThing attributes: operands: annotations: owl: EquivalentClasses, UnionOf multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a operands: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectUnionOf( <http://example.org/b> <http://example.org/c> ) ) )","title":"EquivalentTo Union"},{"location":"examples/#equivalentto-intersectionof","text":"Description : The slot is interpreted as a parent class, and all slot values with a IntersectionOf annotation are collected to make a IntersectionOf expression Schema : id: http//example.org/EquivalentTo-IntersectionOf classes: EquivIntersection: is_a: NamedThing attributes: operands: annotations: owl: EquivalentClasses, IntersectionOf multivalued: true range: NamedThing required: true id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a operands: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/b> <http://example.org/c> ) ) )","title":"EquivalentTo IntersectionOf"},{"location":"examples/#equivalentto-genus-and-somevaluesfrom","text":"Description : All slot value interpretations are collected into a single IntersectionOf Schema : id: http//example.org/EquivalentTo-Genus-and-SomeValuesFrom classes: EquivGenusAndPartOf: is_a: NamedThing attributes: subclass_of: annotations: owl: EquivalentClasses, IntersectionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true part_of: annotations: owl: EquivalentClasses, IntersectionOf, ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true other_part_ofs: annotations: owl: ObjectSomeValuesFrom description: for hidden GCIs slot_uri: BFO:0000050 multivalued: true range: NamedThing required: false id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - X:genus part_of: - x:b - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/genus> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/c> ) ) ) )","title":"EquivalentTo Genus and SomeValuesFrom"},{"location":"examples/#hidden-gci","text":"Description : Demonstrates a case where some slots contribute to a logical definition (equiv axiom), and other contribute to additional axioms (so called hidden GCIs) Schema : id: http//example.org/Hidden-GCI classes: EquivGenusAndPartOf: is_a: NamedThing attributes: subclass_of: annotations: owl: EquivalentClasses, IntersectionOf slot_uri: rdfs:subclass_of multivalued: true range: NamedThing required: true part_of: annotations: owl: EquivalentClasses, IntersectionOf, ObjectSomeValuesFrom slot_uri: BFO:0000050 multivalued: true range: NamedThing required: true other_part_ofs: annotations: owl: ObjectSomeValuesFrom description: for hidden GCIs slot_uri: BFO:0000050 multivalued: true range: NamedThing required: false id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - X:genus part_of: - x:b other_part_ofs: - x:c Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( <http://example.org/a> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/c> ) ) EquivalentClasses( <http://example.org/a> ObjectIntersectionOf( <http://example.org/genus> ObjectSomeValuesFrom( <http://purl.obolibrary.org/obo/BFO_0000050> <http://example.org/b> ) ) ) )","title":"Hidden GCI"},{"location":"examples/#slot-value-level-fstring-template","text":"Description : Axiom generation per slot-value assignment. (Note that currently non-identifier fields have their URIs expanded, but the OWL is the same) Schema : id: http//example.org/slot-value-level-fstring-template classes: ClassTemplateExample1: is_a: NamedThing attributes: subclass_of: annotations: owl.fstring: tag: owl.fstring value: SubClassOf({id} {V}) slot_uri: rdfs:subclass_of multivalued: true range: NamedThing part_of: slot_uri: BFO:0000050 multivalued: true range: NamedThing other_part_ofs: slot_uri: BFO:0000050 multivalued: true range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:a <http://example.org/b> ) )","title":"slot-value level fstring template"},{"location":"examples/#slot-value-level-jinja-template","text":"Description : Axiom generation per slot-value assignment. (Note that currently non-identifier fields have their URIs expanded, but the OWL is the same) Schema : id: http//example.org/slot-value-level-jinja-template classes: ClassTemplateExample2: is_a: NamedThing attributes: subclass_of: annotations: owl.template: tag: owl.template value: '{% for p in subclass_of %}SubClassOf({{id}} {{p}}){% endfor %}' slot_uri: rdfs:subclass_of multivalued: true range: NamedThing part_of: slot_uri: BFO:0000050 multivalued: true range: NamedThing other_part_ofs: slot_uri: BFO:0000050 multivalued: true range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:a subclass_of: - x:b Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:a x:b ) )","title":"slot-value level jinja template"},{"location":"examples/#parts-collection-with-counts","text":"Description : _Demonstrates nesting _ Schema : id: http//example.org/Parts-collection-with-counts classes: CollectionOfPartsWithCounts: annotations: owl.template: tag: owl.template value: \"{% for p in has_part %}\\nSubClassOf( {{id}}\\n ObjectSomeValuesFrom(\\ \\ BFO:0000051\\n ObjectIntersectionOf( {{p.unit\\ \\ }}\\n ObjectSomeValuesFrom(RO:0000053\\ \\ {{p.state.meaning}})\\n \\ \\ {% if p.count %}\\n \\ \\ DataHasValue(PATO:0001555 \\\"{{p.count}}\\\"^^xsd:integer )\\n\\ \\ {% endif %}\\n \\ \\ )\\n\\n \\ \\ )\\n )\\n{% endfor %}\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inlined: true inverse: part_of range: PartWithCounts id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - unit: x:p1 count: 2 state: ACTIVATED - unit: x:p2 count: 3 state: ACTIVATED Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p1 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"2\"^^xsd:integer ) ) ) ) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 ObjectIntersectionOf( x:p2 ObjectSomeValuesFrom( RO:0000053 <http://purl.obolibrary.org/obo/PATO_0002354> ) DataHasValue( PATO:0001555 \"3\"^^xsd:integer ) ) ) ) )","title":"Parts collection with counts"},{"location":"examples/#parts-collection","text":"Description : _Things that are made of an arbitrary list of parts _ Schema : id: http//example.org/Parts-collection classes: CollectionOfParts: annotations: owl.template: tag: owl.template value: \"{% for p in has_part %}\\nSubClassOf( {{id}} ObjectSomeValuesFrom(\\ \\ BFO:0000051 {{p}} ) )\\n{% endfor %}\\nDisjointClasses(\\n Annotation(\\ \\ rdfs:label \\\"all parts of {{id}} are part-disjoint\\\")\\n {% for p in has_part\\ \\ %}\\n ObjectSomeValuesFrom( BFO:0000050 {{p}} )\\n {% endfor %}\\n)\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inverse: part_of range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - x:p1 - x:p2 Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 x:p1 ) ) SubClassOf( x:collection ObjectSomeValuesFrom( BFO:0000051 x:p2 ) ) DisjointClasses( Annotation( rdfs:label \"all parts of x:collection are part-disjoint\" ) ObjectSomeValuesFrom( BFO:0000050 x:p1 ) ObjectSomeValuesFrom( BFO:0000050 x:p2 ) ) )","title":"Parts collection"},{"location":"examples/#defined-parts-collection","text":"Description : _Things that are defined exhaustively by an arbitrary list of parts _ Schema : id: http//example.org/Defined-parts-collection classes: DefinedCollectionOfParts: annotations: owl.template: tag: owl.template value: \"EquivalentClasses( {{id}}\\n ObjectIntersectionOf(\\n\\ \\ {% for p in has_part %}\\n ObjectSomeValuesFrom(\\ \\ BFO:0000051 {{p}} )\\n {% endfor %}\\n \\ \\ ObjectAllValuesFrom( BFO:0000051\\n \\ \\ ObjectSomeValuesFrom( BFO:0000050\\n \\ \\ ObjectUnionOf(\\n \\ \\ {% for p in has_part %}\\n \\ \\ ObjectSomeValuesFrom( BFO:0000051 {{p}} )\\n \\ \\ {% endfor %} )\\n \\ \\ )\\n )\\n \\ \\ )\\n )\" is_a: NamedThing attributes: has_part: slot_uri: BFO:0000051 multivalued: true inverse: part_of range: NamedThing id: identifier: true range: uriorcurie label: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: rdfs:label definition: annotations: owl: AnnotationProperty, AnnotationAssertion slot_uri: IAO:0000115 Input : - id: x:collection has_part: - x:dp1 - x:dp2 Generated axioms : Prefix( xml: = <http://www.w3.org/XML/1998/namespace> ) Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ) Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> ) Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> ) Prefix( owl: = <http://www.w3.org/2002/07/owl#> ) Ontology( <https://w3id.org/linkml/owl/tests> EquivalentClasses( x:collection ObjectIntersectionOf( ObjectSomeValuesFrom( BFO:0000051 x:dp1 ) ObjectSomeValuesFrom( BFO:0000051 x:dp2 ) ObjectAllValuesFrom( BFO:0000051 ObjectSomeValuesFrom( BFO:0000050 ObjectUnionOf( ObjectSomeValuesFrom( BFO:0000051 x:dp1 ) ObjectSomeValuesFrom( BFO:0000051 x:dp2 ) ) ) ) ) ) )","title":"Defined parts collection"}]}