Prefix( owl: = <http://www.w3.org/2002/07/owl#> )
Prefix( rdf: = <http://www.w3.org/1999/02/22-rdf-syntax-ns#> )
Prefix( rdfs: = <http://www.w3.org/2000/01/rdf-schema#> )
Prefix( xsd: = <http://www.w3.org/2001/XMLSchema#> )
Prefix( xml: = <http://www.w3.org/XML/1998/namespace> )
Prefix( mnm: = <https://w3id.org/cmungall/monsters-and-magic/> )
Prefix( linkml: = <https://w3id.org/linkml/> )
Prefix( biolink: = <https://w3id.org/biolink/> )
Prefix( schema: = <http://schema.org/> )
Prefix( PATO: = <http://purl.obolibrary.org/obo/PATO_> )
Prefix( example: = <https://example.org/> )
Prefix( foaf: = <http://xmlns.com/foaf/0.1/> )
Prefix( wgs84: = <http://www.w3.org/2003/01/geo/wgs84_pos#> )

Ontology( <https://w3id.org/cmungall/monsters-and-magic>
    Declaration( Class( mnm:Creature ) )
    Declaration( Class( mnm:Humanoid ) )
    AnnotationAssertion( schema:description mnm:Humanoid "A humanoid creature is a creature that has a humanoid body, and is capable of speech and other human-like activities." )
    SubClassOf( mnm:Humanoid mnm:Creature )
    Declaration( Class( mnm:Orc ) )
    AnnotationAssertion( schema:description mnm:Orc "An orc is a humanoid creature from Middle-earth." )
    DataPropertyAssertion( mnm:armor_class mnm:Orc "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Orc "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Orc "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Orc "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Orc "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Orc "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Orc "8"^^xsd:integer )
    SubClassOf( mnm:Orc mnm:Humanoid )
    Declaration( Class( mnm:Goblin ) )
    AnnotationAssertion( schema:description mnm:Goblin "A goblin is a humanoid creature from Middle-earth." )
    DataPropertyAssertion( mnm:armor_class mnm:Goblin "15"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Goblin "8"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Goblin "14"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Goblin "10"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Goblin "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Goblin "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Goblin "8"^^xsd:integer )
    SubClassOf( mnm:Goblin mnm:Humanoid )
    Declaration( Class( mnm:SerpentineCreature ) )
    AnnotationAssertion( schema:description mnm:SerpentineCreature "A serpentine creature is a creature that has a snake-like body." )
    SubClassOf( mnm:SerpentineCreature mnm:Creature )
    Declaration( Class( mnm:Dragon ) )
    AnnotationAssertion( schema:description mnm:Dragon "A dragon is a large, serpent-like legendary creature that appears in the folklore of many cultures around the world." )
    SubClassOf( mnm:Dragon mnm:SerpentineCreature )
    Declaration( Class( mnm:RedDragon ) )
    AnnotationAssertion( schema:description mnm:RedDragon "A red dragon is a dragon with red scales." )
    SubClassOf( mnm:RedDragon mnm:Dragon )
    Declaration( Class( mnm:GreenDragon ) )
    AnnotationAssertion( schema:description mnm:GreenDragon "A green dragon is a dragon with green scales." )
    SubClassOf( mnm:GreenDragon mnm:Dragon )
    Declaration( Class( mnm:Griffin ) )
    AnnotationAssertion( schema:description mnm:Griffin "A griffin is a legendary creature with the body, tail, and back legs of a lion; the head and wings of an eagle; and an eagle's talons as its front feet." )
    SubClassOf( mnm:Griffin mnm:SerpentineCreature )
    Declaration( Class( mnm:Giant ) )
    AnnotationAssertion( schema:description mnm:Giant "A giant is a creature of human appearance but prodigious size and strength." )
    SubClassOf( mnm:Giant mnm:Humanoid )
    Declaration( Class( mnm:Troll ) )
    AnnotationAssertion( schema:description mnm:Troll "A troll is a giant creature that lives in caves and eats humans." )
    SubClassOf( mnm:Troll mnm:Giant )
    Declaration( Class( mnm:Hobbit ) )
    AnnotationAssertion( schema:description mnm:Hobbit "A hobbit is a small humanoid creature from Middle-earth." )
    SubClassOf( mnm:Hobbit mnm:Humanoid )
    Declaration( Class( mnm:Elf ) )
    AnnotationAssertion( schema:description mnm:Elf "An elf is a humanoid creature from Middle-earth." )
    SubClassOf( mnm:Elf mnm:Humanoid )
    Declaration( Class( mnm:Dwarf ) )
    AnnotationAssertion( schema:description mnm:Dwarf "A dwarf is a humanoid creature from Middle-earth." )
    SubClassOf( mnm:Dwarf mnm:Humanoid )
    Declaration( Class( mnm:Wyvern ) )
    AnnotationAssertion( schema:description mnm:Wyvern "A wyvern is a legendary creature with a reptilian body, bat-like wings, and a barbed tail." )
    SubClassOf( mnm:Wyvern mnm:SerpentineCreature )
    Declaration( Class( mnm:Chimera ) )
    AnnotationAssertion( schema:description mnm:Chimera "A chimera is a legendary creature with the head of a lion, the body of a goat, and the tail of a serpent." )
    SubClassOf( mnm:Chimera mnm:SerpentineCreature )
    Declaration( Class( mnm:Doppelganger ) )
    AnnotationAssertion( schema:description mnm:Doppelganger "A doppelganger is a legendary creature that can take the form of another creature." )
    SubClassOf( mnm:Doppelganger mnm:Humanoid )
    Declaration( Class( mnm:MagicallyCreatedCreature ) )
    AnnotationAssertion( schema:description mnm:MagicallyCreatedCreature "A magicially created creature is a creature that was created by magic." )
    SubClassOf( mnm:MagicallyCreatedCreature mnm:Creature )
    Declaration( Class( mnm:RugOfSmothering ) )
    AnnotationAssertion( schema:description mnm:RugOfSmothering "A rug of smothering is a rug that can be used to suffocate a creature." )
    DataPropertyAssertion( mnm:armor_class mnm:RugOfSmothering "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:RugOfSmothering "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:RugOfSmothering "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:RugOfSmothering "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:RugOfSmothering "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:RugOfSmothering "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:RugOfSmothering "8"^^xsd:integer )
    SubClassOf( mnm:RugOfSmothering mnm:MagicallyCreatedCreature )
    Declaration( Class( mnm:Basilisk ) )
    AnnotationAssertion( schema:description mnm:Basilisk "A basilisk is a legendary serpent-like creature with the body of a snake and the head of a king cobra." )
    DataPropertyAssertion( mnm:armor_class mnm:Basilisk "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Basilisk "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Basilisk "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Basilisk "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Basilisk "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Basilisk "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Basilisk "8"^^xsd:integer )
    SubClassOf( mnm:Basilisk mnm:SerpentineCreature )
    Declaration( Class( mnm:UndeadCreature ) )
    AnnotationAssertion( schema:description mnm:UndeadCreature "An undead creature is a creature that is dead, but has been brought back to life by magic." )
    SubClassOf( mnm:UndeadCreature mnm:Humanoid )
    Declaration( Class( mnm:WhiteWalker ) )
    AnnotationAssertion( schema:description mnm:WhiteWalker "A white walker is an undead creature from the Game of Thrones universe." )
    DataPropertyAssertion( mnm:armor_class mnm:WhiteWalker "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:WhiteWalker "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:WhiteWalker "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:WhiteWalker "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:WhiteWalker "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:WhiteWalker "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:WhiteWalker "8"^^xsd:integer )
    SubClassOf( mnm:WhiteWalker mnm:UndeadCreature )
    Declaration( Class( mnm:Lich ) )
    AnnotationAssertion( schema:description mnm:Lich "A lich is a fictional undead creature in the Dungeons & Dragons fantasy role-playing game." )
    DataPropertyAssertion( mnm:armor_class mnm:Lich "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Lich "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Lich "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Lich "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Lich "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Lich "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Lich "8"^^xsd:integer )
    SubClassOf( mnm:Lich mnm:UndeadCreature )
    Declaration( Class( mnm:Vampire ) )
    AnnotationAssertion( schema:description mnm:Vampire "A vampire is a fictional undead creature in the Dungeons & Dragons fantasy role-playing game." )
    DataPropertyAssertion( mnm:armor_class mnm:Vampire "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Vampire "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Vampire "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Vampire "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Vampire "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Vampire "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Vampire "8"^^xsd:integer )
    SubClassOf( mnm:Vampire mnm:UndeadCreature )
    Declaration( Class( mnm:Zombie ) )
    AnnotationAssertion( schema:description mnm:Zombie "A zombie is a fictional undead creature in the Dungeons & Dragons fantasy role-playing game." )
    DataPropertyAssertion( mnm:armor_class mnm:Zombie "13"^^xsd:integer )
    DataPropertyAssertion( mnm:strength mnm:Zombie "16"^^xsd:integer )
    DataPropertyAssertion( mnm:dexterity mnm:Zombie "11"^^xsd:integer )
    DataPropertyAssertion( mnm:constitution mnm:Zombie "12"^^xsd:integer )
    DataPropertyAssertion( mnm:intelligence mnm:Zombie "10"^^xsd:integer )
    DataPropertyAssertion( mnm:wisdom mnm:Zombie "8"^^xsd:integer )
    DataPropertyAssertion( mnm:charisma mnm:Zombie "8"^^xsd:integer )
    SubClassOf( mnm:Zombie mnm:UndeadCreature )
    Declaration( NamedIndividual( mnm:Smaug ) )
    Declaration( Class( mnm:Smaug ) )
    AnnotationAssertion( schema:description mnm:Smaug "Smaug is a fictional dragon from J. R. R. Tolkien's The Hobbit." )
    ObjectPropertyAssertion( mnm:has_location mnm:Smaug mnm:LonelyMountain )
    ClassAssertion( mnm:RedDragon mnm:Smaug )
    Declaration( NamedIndividual( mnm:TheNightKing ) )
    Declaration( Class( mnm:TheNightKing ) )
    AnnotationAssertion( schema:description mnm:TheNightKing "The Night King is a fictional character in the HBO fantasy television series Game of Thrones." )
    ObjectPropertyAssertion( mnm:has_location mnm:TheNightKing mnm:Winterfell )
    ClassAssertion( mnm:WhiteWalker mnm:TheNightKing )
    Declaration( Class( mnm:Paladin ) )
    AnnotationAssertion( schema:description mnm:Paladin "A paladin is a holy warrior who fights evil using divine magic." )
    DataPropertyAssertion( mnm:hit_dice mnm:Paladin "D10" )
    Declaration( Class( mnm:Wizard ) )
    AnnotationAssertion( schema:description mnm:Wizard "A wizard is a person who practices magic." )
    Declaration( Class( mnm:Rogue ) )
    AnnotationAssertion( schema:description mnm:Rogue "A rogue is a thief or assassin." )
    Declaration( Class( mnm:Necromancer ) )
    AnnotationAssertion( schema:description mnm:Necromancer "A necromancer is a wizard who practices necromancy." )
    SubClassOf( mnm:Necromancer     ObjectSomeValuesFrom( mnm:alignment mnm:CHAOTIC_EVIL ) )
    SubClassOf( mnm:Necromancer mnm:Wizard )
    Declaration( Class( mnm:Fighter ) )
    AnnotationAssertion( schema:description mnm:Fighter "A fighter is a person who fights." )
    Declaration( Class( mnm:Barbarian ) )
    AnnotationAssertion( schema:description mnm:Barbarian "A barbarian is a person who fights without weapons." )
    SubClassOf( mnm:Barbarian mnm:Fighter )
    Declaration( Class( mnm:Ranger ) )
    AnnotationAssertion( schema:description mnm:Ranger "A ranger is a person who fights with a bow and arrow." )
    SubClassOf( mnm:Ranger mnm:Fighter )
    Declaration( Class( mnm:Noble ) )
    AnnotationAssertion( schema:description mnm:Noble "A noble is a person who is a member of the nobility." )
    Declaration( Class( mnm:Monarch ) )
    AnnotationAssertion( schema:description mnm:Monarch "A monarch is a person who rules a kingdom." )
    SubClassOf( mnm:Monarch mnm:Noble )
    Declaration( Class( mnm:Artisan ) )
    AnnotationAssertion( schema:description mnm:Artisan "An artisan is a person who makes things." )
    Declaration( Class( mnm:Blacksmith ) )
    AnnotationAssertion( schema:description mnm:Blacksmith "A blacksmith is a person who makes and repairs metal objects." )
    SubClassOf( mnm:Blacksmith mnm:Artisan )
    Declaration( Class( mnm:Artist ) )
    AnnotationAssertion( schema:description mnm:Artist "An artist is a person who makes art." )
    SubClassOf( mnm:Artist mnm:Artisan )
    Declaration( Class( mnm:Bard ) )
    AnnotationAssertion( schema:description mnm:Bard "A bard is a person who sings and plays music." )
    SubClassOf( mnm:Bard mnm:Artisan )
    Declaration( Class( mnm:Cleric ) )
    AnnotationAssertion( schema:description mnm:Cleric "A cleric is a person who practices religion." )
    Declaration( Class( mnm:Druid ) )
    AnnotationAssertion( schema:description mnm:Druid "A druid is a person who practices druidism." )
    SubClassOf( mnm:Druid mnm:Cleric )
    Declaration( Class( mnm:Monk ) )
    AnnotationAssertion( schema:description mnm:Monk "A monk is a person who practices martial arts." )
    SubClassOf( mnm:Monk mnm:Fighter )
    Declaration( Class( mnm:Sorcerer ) )
    AnnotationAssertion( schema:description mnm:Sorcerer "A sorcerer is a person who practices sorcery." )
    SubClassOf( mnm:Sorcerer mnm:Wizard )
    Declaration( Class( mnm:Warlock ) )
    AnnotationAssertion( schema:description mnm:Warlock "A warlock is a person who practices warlockry." )
    SubClassOf( mnm:Warlock mnm:Wizard )
    Declaration( Class( mnm:Pyromancer ) )
    AnnotationAssertion( schema:description mnm:Pyromancer "A pyromancer is a person who practices pyromancy." )
    SubClassOf( mnm:Pyromancer     ObjectSomeValuesFrom( mnm:alignment mnm:CHAOTIC_EVIL ) )
    SubClassOf( mnm:Pyromancer mnm:Sorcerer )
    Declaration( Class( mnm:Assassin ) )
    AnnotationAssertion( schema:description mnm:Assassin "An assassin is a person who kills people." )
    SubClassOf( mnm:Assassin     ObjectSomeValuesFrom( mnm:alignment mnm:CHAOTIC_EVIL ) )
    SubClassOf( mnm:Assassin mnm:Rogue )
    Declaration( Class( mnm:Thief ) )
    AnnotationAssertion( schema:description mnm:Thief "A thief is a person who steals things." )
    SubClassOf( mnm:Thief mnm:Rogue )
    Declaration( NamedIndividual( mnm:Gandalf ) )
    Declaration( Class( mnm:Gandalf ) )
    AnnotationAssertion( schema:description mnm:Gandalf "Gandalf is a wizard in Middle-earth." )
    ObjectPropertyAssertion( mnm:alignment mnm:Gandalf mnm:LAWFUL_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:Gandalf mnm:MiddleEarth )
    ClassAssertion( mnm:Wizard mnm:Gandalf )
    Declaration( NamedIndividual( mnm:Aragorn ) )
    Declaration( Class( mnm:Aragorn ) )
    AnnotationAssertion( schema:description mnm:Aragorn "Aragorn is a ranger in Middle-earth." )
    ObjectPropertyAssertion( mnm:alignment mnm:Aragorn mnm:NEUTRAL_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:Aragorn mnm:MiddleEarth )
    ClassAssertion( mnm:Ranger mnm:Aragorn )
    Declaration( NamedIndividual( mnm:Hawkmoon ) )
    Declaration( Class( mnm:Hawkmoon ) )
    AnnotationAssertion( schema:description mnm:Hawkmoon "Hawkmoon is a paladin in Middle-earth." )
    ClassAssertion( mnm:Paladin mnm:Hawkmoon )
    Declaration( NamedIndividual( mnm:Elric ) )
    Declaration( Class( mnm:Elric ) )
    AnnotationAssertion( schema:description mnm:Elric "Elric is a necromancer in Middle-earth." )
    ObjectPropertyAssertion( mnm:alignment mnm:Elric mnm:CHAOTIC_NEUTRAL )
    ClassAssertion( mnm:Necromancer mnm:Elric )
    Declaration( NamedIndividual( mnm:Fafhrd ) )
    Declaration( Class( mnm:Fafhrd ) )
    AnnotationAssertion( schema:description mnm:Fafhrd "Fafhrd is a thief in Nehwon." )
    ObjectPropertyAssertion( mnm:alignment mnm:Fafhrd mnm:CHAOTIC_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:Fafhrd mnm:DyingEarth )
    ClassAssertion( mnm:Thief mnm:Fafhrd )
    Declaration( NamedIndividual( mnm:TheGreyMouser ) )
    Declaration( Class( mnm:TheGreyMouser ) )
    AnnotationAssertion( schema:description mnm:TheGreyMouser "The Grey Mouser is a thief in Nehwon." )
    ObjectPropertyAssertion( mnm:alignment mnm:TheGreyMouser mnm:CHAOTIC_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:TheGreyMouser mnm:DyingEarth )
    ClassAssertion( mnm:Thief mnm:TheGreyMouser )
    Declaration( NamedIndividual( mnm:Conan ) )
    Declaration( Class( mnm:Conan ) )
    AnnotationAssertion( schema:description mnm:Conan "Conan is a barbarian in Cimmeria." )
    ObjectPropertyAssertion( mnm:originates_from mnm:Conan mnm:Cimmeria )
    ClassAssertion( mnm:Barbarian mnm:Conan )
    Declaration( NamedIndividual( mnm:Vecna ) )
    Declaration( Class( mnm:Vecna ) )
    AnnotationAssertion( schema:description mnm:Vecna "Vecna is a lich in Middle-earth." )
    ObjectPropertyAssertion( mnm:alignment mnm:Vecna mnm:LAWFUL_EVIL )
    ObjectPropertyAssertion( mnm:originates_from mnm:Vecna mnm:MiddleEarth )
    ClassAssertion( mnm:Lich mnm:Vecna )
    Declaration( NamedIndividual( mnm:HarryPotter ) )
    Declaration( Class( mnm:HarryPotter ) )
    AnnotationAssertion( schema:description mnm:HarryPotter "Harry Potter is a wizard in the Wizarding World." )
    ObjectPropertyAssertion( mnm:alignment mnm:HarryPotter mnm:NEUTRAL_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:HarryPotter mnm:WizardingWorld )
    ClassAssertion( mnm:Wizard mnm:HarryPotter )
    Declaration( NamedIndividual( mnm:Littlefinger ) )
    Declaration( Class( mnm:Littlefinger ) )
    AnnotationAssertion( schema:description mnm:Littlefinger "Littlefinger is a noble in Westeros." )
    ObjectPropertyAssertion( mnm:alignment mnm:Littlefinger mnm:CHAOTIC_EVIL )
    ObjectPropertyAssertion( mnm:originates_from mnm:Littlefinger mnm:Westeros )
    ClassAssertion( mnm:Noble mnm:Littlefinger )
    Declaration( NamedIndividual( mnm:Severian ) )
    Declaration( Class( mnm:Severian ) )
    AnnotationAssertion( schema:description mnm:Severian "Severian is a torturer in the Commonwealth." )
    ObjectPropertyAssertion( mnm:alignment mnm:Severian mnm:NEUTRAL_GOOD )
    ObjectPropertyAssertion( mnm:originates_from mnm:Severian mnm:Commonwealth )
    ClassAssertion( mnm:Torturer mnm:Severian )
    Declaration( NamedIndividual( mnm:TheAutarch ) )
    Declaration( Class( mnm:TheAutarch ) )
    AnnotationAssertion( schema:description mnm:TheAutarch "The Autarch is a Monarch in the Commonwealth." )
    ObjectPropertyAssertion( mnm:originates_from mnm:TheAutarch mnm:Commonwealth )
    ClassAssertion( mnm:Monarch mnm:TheAutarch )
    Declaration( Class( mnm:Artifact ) )
    Declaration( Class( mnm:ManufacturedArtifact ) )
    AnnotationAssertion( schema:description mnm:ManufacturedArtifact "A manufactured artifact is an artifact that was created by a human." )
    SubClassOf( mnm:ManufacturedArtifact mnm:Artifact )
    Declaration( Class( mnm:Weapon ) )
    AnnotationAssertion( schema:description mnm:Weapon "A weapon is an object that is used to inflict damage." )
    SubClassOf( mnm:Weapon mnm:ManufacturedArtifact )
    Declaration( Class( mnm:Armor ) )
    AnnotationAssertion( schema:description mnm:Armor "Armor is an object that is worn to protect the wearer from physical attacks." )
    SubClassOf( mnm:Armor mnm:ManufacturedArtifact )
    Declaration( Class( mnm:Mace ) )
    AnnotationAssertion( schema:description mnm:Mace "A mace is a blunt weapon." )
    SubClassOf( mnm:Mace mnm:Weapon )
    Declaration( Class( mnm:BattleAxe ) )
    AnnotationAssertion( schema:description mnm:BattleAxe "A battle axe is a sharp weapon." )
    SubClassOf( mnm:BattleAxe mnm:Weapon )
    Declaration( Class( mnm:Sword ) )
    AnnotationAssertion( schema:description mnm:Sword "A sword is a sharp weapon." )
    SubClassOf( mnm:Sword mnm:Weapon )
    Declaration( Class( mnm:BastardSword ) )
    AnnotationAssertion( schema:description mnm:BastardSword "A bastard sword is a sharp weapon." )
    SubClassOf( mnm:BastardSword mnm:Sword )
    Declaration( Class( mnm:LongSword ) )
    AnnotationAssertion( schema:description mnm:LongSword "A long sword is a sharp weapon." )
    SubClassOf( mnm:LongSword mnm:Sword )
    Declaration( Class( mnm:EnchantedArmor ) )
    AnnotationAssertion( schema:description mnm:EnchantedArmor "Enchanted armor is armor that has been enchanted." )
    SubClassOf( mnm:EnchantedArmor mnm:Armor )
    Declaration( Class( mnm:PieceOfGold ) )
    AnnotationAssertion( schema:description mnm:PieceOfGold "A piece of gold is a coin made of gold." )
    SubClassOf( mnm:PieceOfGold mnm:ManufacturedArtifact )
    Declaration( Class( mnm:Jewelry ) )
    AnnotationAssertion( schema:description mnm:Jewelry "Jewelry is a piece of jewelry." )
    SubClassOf( mnm:Jewelry mnm:ManufacturedArtifact )
    Declaration( Class( mnm:Ring ) )
    AnnotationAssertion( schema:description mnm:Ring "A ring is a piece of jewelry." )
    SubClassOf( mnm:Ring mnm:Jewelry )
    Declaration( Class( mnm:Throne ) )
    AnnotationAssertion( schema:description mnm:Throne "A throne is a chair that is used by a king or queen." )
    SubClassOf( mnm:Throne mnm:ManufacturedArtifact )
    Declaration( NamedIndividual( mnm:TheRing ) )
    Declaration( Class( mnm:TheRing ) )
    AnnotationAssertion( schema:description mnm:TheRing "The Ring is a fictional magical ring that appears in J. R. R. Tolkien's The Lord of the Rings." )
    ObjectPropertyAssertion( mnm:has_location mnm:TheRing mnm:MountDoom )
    ClassAssertion( mnm:Ring mnm:TheRing )
    Declaration( NamedIndividual( mnm:TheIronThrone ) )
    Declaration( Class( mnm:TheIronThrone ) )
    AnnotationAssertion( schema:description mnm:TheIronThrone "The Iron Throne is a fictional throne that appears in George R. R. Martin's A Song of Ice and Fire." )
    ObjectPropertyAssertion( mnm:has_location mnm:TheIronThrone mnm:KingsLanding )
    ClassAssertion( mnm:Throne mnm:TheIronThrone )
    Declaration( NamedIndividual( mnm:TerminusEst ) )
    Declaration( Class( mnm:TerminusEst ) )
    AnnotationAssertion( schema:description mnm:TerminusEst "Terminus Est is a fictional sword that appears in Gene Wolfe's The Book of the New Sun." )
    ClassAssertion( mnm:BastardSword mnm:TerminusEst )
    Declaration( Class( mnm:InvisibilitySpell ) )
    AnnotationAssertion( schema:description mnm:InvisibilitySpell "An invisibility spell makes a character invisible." )
    Declaration( Class( mnm:FireballSpell ) )
    AnnotationAssertion( schema:description mnm:FireballSpell "A fireball spell causes a fireball to appear and explode." )
    Declaration( Class( mnm:LightningBoltSpell ) )
    AnnotationAssertion( schema:description mnm:LightningBoltSpell "A lightning bolt spell causes a lightning bolt to appear and strike a target." )
    Declaration( Class( mnm:PerceptionSkill ) )
    AnnotationAssertion( schema:description mnm:PerceptionSkill "Perception is a measure of a character's ability to notice things." )
    Declaration( Class( mnm:StealthSkill ) )
    AnnotationAssertion( schema:description mnm:StealthSkill "Stealth is a measure of a character's ability to hide." )
    Declaration( Class( mnm:AcrobaticsSkill ) )
    AnnotationAssertion( schema:description mnm:AcrobaticsSkill "Acrobatics is a measure of a character's ability to perform acrobatic stunts." )
    Declaration( Class( mnm:Location ) )
    Declaration( Class( mnm:World ) )
    AnnotationAssertion( schema:description mnm:World "A world is a place where a game takes place." )
    SubClassOf( mnm:World mnm:Location )
    Declaration( Class( mnm:GeographicFeature ) )
    AnnotationAssertion( schema:description mnm:GeographicFeature "A geographic feature is a natural feature of a location." )
    SubClassOf( mnm:GeographicFeature mnm:Location )
    Declaration( Class( mnm:ConstructedFeature ) )
    AnnotationAssertion( schema:description mnm:ConstructedFeature "A constructed feature is a feature that was created by humans." )
    SubClassOf( mnm:ConstructedFeature mnm:Location )
    Declaration( Class( mnm:Country ) )
    AnnotationAssertion( schema:description mnm:Country "A country is a place where a game takes place." )
    SubClassOf( mnm:Country     ObjectSomeValuesFrom( mnm:part_of mnm:World ) )
    SubClassOf( mnm:Country mnm:GeographicFeature )
    Declaration( Class( mnm:HumanSettlement ) )
    AnnotationAssertion( schema:description mnm:HumanSettlement "A human settlement is a settlement inhabited by humans." )
    SubClassOf( mnm:HumanSettlement mnm:ConstructedFeature )
    Declaration( Class( mnm:City ) )
    AnnotationAssertion( schema:description mnm:City "A city is a large human settlement." )
    SubClassOf( mnm:City mnm:HumanSettlement )
    Declaration( Class( mnm:Town ) )
    AnnotationAssertion( schema:description mnm:Town "A town is a small human settlement." )
    SubClassOf( mnm:Town mnm:HumanSettlement )
    Declaration( Class( mnm:Village ) )
    AnnotationAssertion( schema:description mnm:Village "A village is a small human settlement." )
    SubClassOf( mnm:Village mnm:HumanSettlement )
    Declaration( Class( mnm:Forest ) )
    AnnotationAssertion( schema:description mnm:Forest "A forest is a large area of land covered with trees." )
    SubClassOf( mnm:Forest mnm:GeographicFeature )
    Declaration( Class( mnm:Mountain ) )
    AnnotationAssertion( schema:description mnm:Mountain "A mountain is a large natural elevation of the Earth's surface." )
    SubClassOf( mnm:Mountain mnm:GeographicFeature )
    Declaration( Class( mnm:Cave ) )
    AnnotationAssertion( schema:description mnm:Cave "A cave is a natural underground opening." )
    SubClassOf( mnm:Cave mnm:GeographicFeature )
    Declaration( Class( mnm:Dungeon ) )
    SubClassOf( mnm:Dungeon mnm:ConstructedFeature )
    Declaration( Class( mnm:Mine ) )
    AnnotationAssertion( schema:description mnm:Mine "A mine is a place where ore is extracted from the ground." )
    SubClassOf( mnm:Mine mnm:ConstructedFeature )
    Declaration( Class( mnm:Mineshaft ) )
    AnnotationAssertion( schema:description mnm:Mineshaft "A mineshaft is a tunnel that leads to a mine." )
    SubClassOf( mnm:Mineshaft     ObjectSomeValuesFrom( mnm:part_of mnm:Mine ) )
    SubClassOf( mnm:Mineshaft mnm:ConstructedFeature )
    Declaration( Class( mnm:Building ) )
    AnnotationAssertion( schema:description mnm:Building "A building is a structure that is used for human habitation." )
    SubClassOf( mnm:Building mnm:ConstructedFeature )
    Declaration( Class( mnm:Tavern ) )
    AnnotationAssertion( schema:description mnm:Tavern "A tavern is a place where people go to drink alcohol." )
    SubClassOf( mnm:Tavern mnm:Building )
    Declaration( Class( mnm:Palace ) )
    AnnotationAssertion( schema:description mnm:Palace "A palace is a large building that is used by a monarch." )
    SubClassOf( mnm:Palace mnm:Building )
    Declaration( Class( mnm:Castle ) )
    AnnotationAssertion( schema:description mnm:Castle "A castle is a large building that is used by a monarch." )
    SubClassOf( mnm:Castle mnm:Building )
    Declaration( Class( mnm:Temple ) )
    AnnotationAssertion( schema:description mnm:Temple "A temple is a building that is used for religious purposes." )
    SubClassOf( mnm:Temple mnm:Building )
    Declaration( Class( mnm:School ) )
    AnnotationAssertion( schema:description mnm:School "A school is a place where people learn." )
    SubClassOf( mnm:School mnm:Building )
    Declaration( Class( mnm:NecromancerSchool ) )
    AnnotationAssertion( schema:description mnm:NecromancerSchool "A necromancer school is a school that teaches necromancy." )
    SubClassOf( mnm:NecromancerSchool mnm:School )
    Declaration( Class( mnm:NecromancerTower ) )
    AnnotationAssertion( schema:description mnm:NecromancerTower "A necromancer tower is a tower that is used by a necromancer." )
    SubClassOf( mnm:NecromancerTower mnm:Building )
    Declaration( Class( mnm:Necropolis ) )
    AnnotationAssertion( schema:description mnm:Necropolis "A necropolis is a city of the dead." )
    SubClassOf( mnm:Necropolis mnm:City )
    Declaration( NamedIndividual( mnm:MiddleEarth ) )
    Declaration( Class( mnm:MiddleEarth ) )
    AnnotationAssertion( schema:description mnm:MiddleEarth "Middle-earth is a fictional setting created by J. R. R. Tolkien." )
    ClassAssertion( mnm:World mnm:MiddleEarth )
    Declaration( NamedIndividual( mnm:Hyboria ) )
    Declaration( Class( mnm:Hyboria ) )
    AnnotationAssertion( schema:description mnm:Hyboria "Hyboria is a fictional setting created by Robert E. Howard." )
    ClassAssertion( mnm:World mnm:Hyboria )
    Declaration( NamedIndividual( mnm:DyingEarth ) )
    Declaration( Class( mnm:DyingEarth ) )
    AnnotationAssertion( schema:description mnm:DyingEarth "The Dying Earth is a fictional setting created by Jack Vance." )
    ClassAssertion( mnm:World mnm:DyingEarth )
    Declaration( NamedIndividual( mnm:MinasTirith ) )
    Declaration( Class( mnm:MinasTirith ) )
    AnnotationAssertion( schema:description mnm:MinasTirith "Minas Tirith is a city in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:MinasTirith mnm:Gondor )
    ClassAssertion( mnm:City mnm:MinasTirith )
    Declaration( NamedIndividual( mnm:Gondor ) )
    Declaration( Class( mnm:Gondor ) )
    AnnotationAssertion( schema:description mnm:Gondor "Gondor is a kingdom in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Gondor mnm:MiddleEarth )
    ClassAssertion( mnm:Country mnm:Gondor )
    Declaration( NamedIndividual( mnm:Rivendell ) )
    Declaration( Class( mnm:Rivendell ) )
    AnnotationAssertion( schema:description mnm:Rivendell "Rivendell is a city in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Rivendell mnm:MiddleEarth )
    ClassAssertion( mnm:City mnm:Rivendell )
    Declaration( NamedIndividual( mnm:Mirkwood ) )
    Declaration( Class( mnm:Mirkwood ) )
    AnnotationAssertion( schema:description mnm:Mirkwood "Mirkwood is a forest in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Mirkwood mnm:MiddleEarth )
    ClassAssertion( mnm:Forest mnm:Mirkwood )
    Declaration( NamedIndividual( mnm:Moria ) )
    Declaration( Class( mnm:Moria ) )
    AnnotationAssertion( schema:description mnm:Moria "Moria is a mine in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Moria mnm:MiddleEarth )
    ClassAssertion( mnm:Mine mnm:Moria )
    Declaration( NamedIndividual( mnm:Lankhmar ) )
    Declaration( Class( mnm:Lankhmar ) )
    AnnotationAssertion( schema:description mnm:Lankhmar "Lankhmar is a city in Nehwon." )
    ObjectPropertyAssertion( mnm:part_of mnm:Lankhmar mnm:Nehwon )
    ClassAssertion( mnm:City mnm:Lankhmar )
    Declaration( NamedIndividual( mnm:Cimmeria ) )
    Declaration( Class( mnm:Cimmeria ) )
    AnnotationAssertion( schema:description mnm:Cimmeria "Cimmeria is a country in Hyboria." )
    ObjectPropertyAssertion( mnm:part_of mnm:Cimmeria mnm:Hyboria )
    ClassAssertion( mnm:Country mnm:Cimmeria )
    Declaration( NamedIndividual( mnm:WizardingWorld ) )
    Declaration( Class( mnm:WizardingWorld ) )
    AnnotationAssertion( schema:description mnm:WizardingWorld "The Wizarding World is a fictional setting created by J. K. Rowling." )
    ClassAssertion( mnm:World mnm:WizardingWorld )
    Declaration( NamedIndividual( mnm:Hogwarts ) )
    Declaration( Class( mnm:Hogwarts ) )
    AnnotationAssertion( schema:description mnm:Hogwarts "Hogwarts is a school in the Wizarding World." )
    ObjectPropertyAssertion( mnm:part_of mnm:Hogwarts mnm:WizardingWorld )
    ClassAssertion( mnm:School mnm:Hogwarts )
    Declaration( NamedIndividual( mnm:Westeros ) )
    Declaration( Class( mnm:Westeros ) )
    AnnotationAssertion( schema:description mnm:Westeros "Westeros is a country in the Seven Kingdoms." )
    ObjectPropertyAssertion( mnm:part_of mnm:Westeros mnm:TheSevenKingdoms )
    ClassAssertion( mnm:Country mnm:Westeros )
    Declaration( NamedIndividual( mnm:Winterfell ) )
    Declaration( Class( mnm:Winterfell ) )
    AnnotationAssertion( schema:description mnm:Winterfell "Winterfell is a castle in Westeros." )
    ObjectPropertyAssertion( mnm:part_of mnm:Winterfell mnm:Westeros )
    ClassAssertion( mnm:Castle mnm:Winterfell )
    Declaration( NamedIndividual( mnm:TheSevenKingdoms ) )
    Declaration( Class( mnm:TheSevenKingdoms ) )
    AnnotationAssertion( schema:description mnm:TheSevenKingdoms "The Seven Kingdoms is a fictional setting created by George R. R. Martin." )
    ClassAssertion( mnm:World mnm:TheSevenKingdoms )
    Declaration( NamedIndividual( mnm:KingsLanding ) )
    Declaration( Class( mnm:KingsLanding ) )
    AnnotationAssertion( schema:description mnm:KingsLanding "King's Landing is a city in Westeros." )
    ObjectPropertyAssertion( mnm:part_of mnm:KingsLanding mnm:Westeros )
    ClassAssertion( mnm:City mnm:KingsLanding )
    Declaration( NamedIndividual( mnm:Commonwealth ) )
    Declaration( Class( mnm:Commonwealth ) )
    AnnotationAssertion( schema:description mnm:Commonwealth "The Commonwealth is a country in the Dying Earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Commonwealth mnm:DyingEarth )
    ClassAssertion( mnm:Country mnm:Commonwealth )
    Declaration( NamedIndividual( mnm:Ascia ) )
    Declaration( Class( mnm:Ascia ) )
    AnnotationAssertion( schema:description mnm:Ascia "Ascia is a city in the Commonwealth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Ascia mnm:Commonwealth )
    ClassAssertion( mnm:City mnm:Ascia )
    Declaration( NamedIndividual( mnm:MountDoom ) )
    Declaration( Class( mnm:MountDoom ) )
    AnnotationAssertion( schema:description mnm:MountDoom "Mount Doom is a mountain in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:MountDoom mnm:Mordor )
    ClassAssertion( mnm:Mountain mnm:MountDoom )
    Declaration( NamedIndividual( mnm:Mordor ) )
    Declaration( Class( mnm:Mordor ) )
    AnnotationAssertion( schema:description mnm:Mordor "Mordor is a country in Middle-earth." )
    ObjectPropertyAssertion( mnm:part_of mnm:Mordor mnm:MiddleEarth )
    ClassAssertion( mnm:Country mnm:Mordor )
)